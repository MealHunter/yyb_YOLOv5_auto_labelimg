import numpy as np

def l2_normalize(feat: np.ndarray) -> np.ndarray:
    """
    对 1D 向量进行 L2 归一化
    参数：
        feat (np.ndarray): 输入特征，形状为 (512,)
    返回：
        np.ndarray: 归一化后的特征向量
    """
    norm = np.linalg.norm(feat)
    if norm == 0:
        return feat
    return feat / norm


def cosine_similarity(emb1, emb2):
    """计算两个特征向量之间的余弦相似度"""
    # 确保输入是numpy数组
    emb1 = np.array(emb1, dtype=float)
    emb2 = np.array(emb2, dtype=float)

    # 检查两个向量是否具有相同长度
    if len(emb1) != len(emb2):
        raise ValueError(f"特征向量长度不匹配: {len(emb1)} vs {len(emb2)}")

    # 先对两个向量进行L2归一化
    emb1_normalized = l2_normalize(emb1)
    emb2_normalized = l2_normalize(emb2)

    # 计算归一化后向量的点积（即余弦相似度）
    similarity = np.dot(emb1_normalized, emb2_normalized) / (np.linalg.norm(emb1_normalized) * np.linalg.norm(emb2_normalized))
    return similarity


def compare_faces(emb1, emb2, threshold=0.1):
    """比较两个特征向量，判断是否为同一个人"""
    similarity = cosine_similarity(emb1, emb2)
    return similarity, similarity > threshold


if __name__ == '__main__':
    # 第一个特征向量 yyb
    emb1 = [0.361415,1.150439,-0.151082,-0.411228,0.474316,-0.733426,-0.537830,0.432967,1.776689,-1.367592,-0.883047,-1.995365,-0.184879,0.375787,-1.224792,-1.668538
,0.187619,-0.895652,-0.473828,1.245010,-0.391437,-0.156502,0.031605,1.176685,0.444172,-0.082331,0.692017,0.951432,0.232073,-0.069969,0.599212,-0.616933
,-0.345400,1.520075,-1.107873,0.415064,-1.899820,0.556403,-0.897235,-0.339858,-0.501231,1.267115,0.159973,1.139112,-0.071187,0.360319,0.089151,0.042870
,-0.157415,-0.147185,0.180373,-0.873486,-0.623997,-0.869710,0.007795,0.691895,0.371402,1.142888,-0.482232,-1.116277,-0.434003,1.151961,1.700387,0.568034
,0.266905,0.954599,0.186280,0.545198,-1.566965,-0.205157,-0.412689,0.475960,1.161522,0.343451,-1.055137,-0.225618,0.526138,0.564624,0.438692,-0.066681
,-1.208290,-1.112440,0.615167,-1.633280,-0.151813,-1.471602,-0.347166,-0.344669,1.317293,-0.602988,0.489966,-0.049082,1.995365,-0.457996,-0.414881,-0.605545
,1.402120,0.804491,1.722187,-0.856131,-0.782325,-1.136250,-1.154702,-0.307279,0.066376,0.627833,-0.154797,0.121730,-0.180068,-1.923569,0.546964,0.482902
,-0.212526,-0.309654,-0.320372,0.055902,-1.176624,0.608773,-0.220807,-0.679899,0.702674,0.138903,0.876774,0.936269,0.441736,-0.643727,-0.738237,-1.413325
,0.421397,-0.351915,0.929084,-1.667503,-0.594889,-0.142435,1.363634,-0.044332,-0.415917,-1.506495,-0.125810,0.810581,0.340954,-1.381355,-1.210665,0.507382
,1.546565,-0.739577,-1.581031,0.075693,0.707424,0.239198,-0.470236,0.735070,-1.779125,0.728981,1.151413,0.718080,0.870198,0.777758,-1.357484,1.890807
,0.384434,0.624301,0.367200,-1.084124,-0.115519,-0.390158,0.492523,0.724840,0.035989,0.294369,0.797975,0.758637,-0.308132,1.364548,-1.145141,-0.165697
,0.031848,-0.600308,-0.323355,0.321772,0.153579,-0.904664,-0.573575,0.758332,-0.799011,0.979079,-0.482963,0.859845,-0.822882,-0.362755,0.032275,0.009134
,0.885543,1.689425,0.068203,-0.134823,-0.378588,-1.912608,-1.152022,-1.247385,-0.286392,1.371185,-0.240598,0.025454,-0.336387,1.066220,0.199372,-0.217214
,1.329472,0.505433,-1.297624,-0.533628,1.302069,-1.138321,0.413055,-1.529088,-0.884264,-0.277440,-1.706537,-1.110309,0.585085,0.476508,-0.131291,0.677585
,0.068568,0.054623,-0.162226,-0.378161,-1.320946,0.389305,0.787745,0.398013,-1.075355,-0.391498,-0.045793,0.041044,-0.206071,1.174066,-1.170778,0.767101
,1.230456,0.936756,-0.873851,-0.593123,0.620465,1.040522,0.930301,-0.538256,-0.099564,0.369941,-0.531740,-1.271682,0.384373,0.995155,-1.043750,0.204731
,0.424077,-0.446852,1.555821,-0.711626,0.460310,-1.334709,0.285539,0.510061,-0.605728,-1.510332,1.668173,-0.040678,0.863316,-0.488626,-0.914895,0.404955
,0.435038,-0.271107,-0.994851,1.192944,0.213134,0.632279,1.303348,-0.841638,-1.542972,1.462407,-0.265870,-1.206524,0.133300,0.762169,-0.323721,-0.573880
,-0.623144,0.110586,-1.995365,0.176414,0.639647,-0.783482,0.115397,-0.046829,-0.004628,1.365826,0.511096,0.214352,0.448618,-0.845596,1.032789,-0.339919
,0.218432,0.623510,0.151143,0.048412,0.271777,0.064245,-1.057086,-0.119416,0.298145,-1.786432,-0.355326,0.548486,0.018390,0.022836,0.600796,-1.009527
,-0.375482,-0.851564,-1.050936,-0.702248,0.924455,-0.438692,-0.721551,-0.623510,-0.795844,-1.478544,-1.250612,-0.654871,-1.235327,0.538804,-1.180034,0.699325
,-0.011327,-1.406444,0.232743,-1.013728,-0.854121,0.625154,-0.884812,0.118685,-0.196510,-1.995365,1.348167,1.103854,-0.297475,0.930910,1.511184,-0.125749
,-0.552201,0.166488,1.616838,-1.450471,-1.031693,-1.123158,0.200529,-0.782447,-0.495873,1.184601,-0.590078,-0.613279,-1.018965,-0.780742,-0.215509,1.439327
,-1.056842,1.120783,1.541571,1.064272,-0.126419,-0.070943,-0.552140,1.018722,0.469444,0.827753,0.246201,1.234170,-0.456169,-0.051883,-1.942386,1.430680
,0.677524,0.063453,-0.675454,-1.231065,-1.413264,0.360806,0.459092,-0.256066,0.250342,-0.199250,1.163897,0.893094,-0.137076,-0.236031,-0.432298,0.308253
,0.126358,-1.025299,-1.162740,0.396978,0.583928,-0.534480,-0.304173,0.112657,-0.351306,0.107907,-0.393568,-0.656211,0.365069,0.017721,0.099625,0.177267
,-0.281216,-0.927257,-0.478213,1.055259,1.231125,0.336265,0.396187,0.757358,-1.089300,-0.316718,0.736532,0.261181,-0.457813,-0.660595,0.062418,-0.826170
,0.462867,-0.335900,-1.358032,1.133510,1.410037,-0.427609,-0.136467,0.627711,-0.036598,0.825500,-0.299667,-1.995365,0.185671,1.115302,0.719298,0.647320
,-0.420301,-0.184940,1.384278,1.536517,-0.782934,0.985168,0.802543,1.011414,-0.655054,0.463841,0.798584,1.122305,-0.337301,-1.703919,0.661204,-0.264043
,0.488261,-1.076633,0.151143,0.699386,0.644640,0.124044,-0.207471,-0.509757,1.069022,-0.908196,0.332124,0.035259,-0.796758,0.353742,-0.263252,-0.345339
,0.408853,0.554637,0.702126,-0.909171,1.841908,-0.122705,0.553662,0.464572,-0.502936,-1.242087,1.995365,0.205340,-0.117468,1.499492,0.409157,-0.524859
,-0.510792,0.307462,-0.506773,0.034893,-1.365948,-1.911572,-0.683918,0.800898,-0.402763,-0.224278,1.241843,0.136162,0.113814,0.007977,-0.198763,0.756323]



    # 第二个特征向量 ypt
    emb2 = [-0.02316363, -0.03494411,  0.00407935, -0.04077172, -0.03265425,
        -0.003157  , -0.03149455, -0.02470798,  0.00487954,  0.02204858,
         0.01408627,  0.02497391, -0.02058764, -0.04303337, -0.00207463,
         0.01150966,  0.01131951, -0.02395646, -0.02635912, -0.0020161 ,
         0.00463236, -0.01236586, -0.03407729, -0.01069885, -0.01887927,
         0.00932657,  0.03550838, -0.01101727, -0.00996863,  0.0087155 ,
        -0.00896855,  0.04176871,  0.04079758,  0.00063489,  0.04131152,
        -0.01666758, -0.03245344,  0.00396074, -0.02918563, -0.01756671,
        -0.04055569,  0.02710113, -0.00573811,  0.01345181,  0.02378028,
         0.01385604,  0.01063291,  0.04357875,  0.04357033,  0.01205719,
         0.00493491, -0.0304079 ,  0.00023919,  0.04279539, -0.03403994,
        -0.00302017, -0.04144911,  0.00640521,  0.00403376,  0.04010311,
        -0.00841807,  0.03733128,  0.00224093,  0.04186621,  0.01872333,
         0.04259158, -0.03904834, -0.03934933, -0.03945487, -0.03453154,
         0.03091031, -0.02907773,  0.03017456, -0.01701588, -0.02981879,
        -0.02204055, -0.02351418,  0.00689537,  0.01739232, -0.02211608,
        -0.01740073,  0.02253263,  0.03855202, -0.00825567,  0.04229021,
         0.02099102,  0.01293999,  0.00906149,  0.00917471,  0.00950946,
        -0.04036324,  0.01078046,  0.0145252 , -0.0196174 , -0.02425629,
        -0.017938  , -0.0395318 ,  0.00978995,  0.032998  , -0.04389849,
         0.01390947, -0.00441471,  0.03287909,  0.00969959, -0.01659066,
        -0.02595687, -0.02281786, -0.00641929,  0.02180227,  0.01832069,
        -0.01993331,  0.02622993,  0.0322217 , -0.04359846, -0.03432124,
         0.01958943, -0.04303963,  0.01672674, -0.02575663, -0.01985906,
        -0.02853264, -0.01858548, -0.02748976, -0.00553485,  0.01457253,
         0.01115068, -0.02080946, -0.01606834, -0.02418731,  0.03273305,
         0.01316607,  0.01013573, -0.01110562,  0.04253154, -0.02351915,
         0.0267668 , -0.02207038, -0.02991818,  0.0361467 , -0.01922369,
         0.00787427, -0.03405536, -0.01348654,  0.03290908, -0.03663486,
         0.00491145,  0.04243173, -0.00747895,  0.00992565, -0.04412836,
        -0.03911499,  0.02946766, -0.01888087,  0.04397999, -0.04214789,
         0.02563466,  0.02933836,  0.00425351, -0.01263295,  0.02937348,
        -0.01279551, -0.00068202,  0.03398988, -0.00537818, -0.01124796,
         0.01038709,  0.00293774, -0.01198404,  0.03580592, -0.00503696,
        -0.01358116,  0.04191451,  0.01365248,  0.03867766,  0.01211676,
         0.03995963,  0.03439398, -0.01026132, -0.01229752,  0.01916523,
         0.00884609,  0.04342807,  0.01631623, -0.01107315,  0.03463562,
         0.02839611, -0.04250119,  0.03541493, -0.0186536 , -0.03714432,
         0.02250111, -0.00419172, -0.02777836, -0.02409776,  0.03759748,
        -0.037157  ,  0.02133797,  0.01575316,  0.02423418,  0.01086067,
        -0.0009575 , -0.02663696, -0.01287115, -0.01674682,  0.00869497,
         0.01468921, -0.02562576,  0.04266928, -0.03658515, -0.01931361,
         0.01720425,  0.03641172, -0.00666045, -0.02119697, -0.01897392,
         0.04305558, -0.0124205 ,  0.00504117, -0.01468926,  0.00214693,
        -0.00790945, -0.02600531, -0.00411254, -0.04068951, -0.01605871,
         0.0019235 ,  0.01230352,  0.03090835, -0.01855521, -0.00073135,
         0.00690306, -0.04241675,  0.04363912,  0.02711542,  0.00464744,
        -0.01899697,  0.04407501, -0.02528748,  0.03228516, -0.0149974 ,
        -0.02764944,  0.03509567,  0.01500179,  0.04326091,  0.02236483,
        -0.0266642 , -0.0230964 , -0.01369231, -0.01469015, -0.02368498,
         0.03222388, -0.00459481, -0.03111442, -0.03167915, -0.03303845,
         0.03702568, -0.02357675,  0.02676914,  0.02079713, -0.00869886,
         0.01266134,  0.0291165 , -0.0368539 ,  0.00262939, -0.02918948,
         0.0158626 , -0.01044582, -0.01424351, -0.0025809 , -0.03069172,
         0.01776071,  0.01608055, -0.00963345, -0.01333301, -0.04399714,
         0.04146979,  0.00273128, -0.02259518, -0.00019815,  0.0160571 ,
         0.03841266, -0.04304669, -0.0030559 ,  0.02694623,  0.01854753,
        -0.01858526,  0.01934853,  0.04309542, -0.00771643, -0.02109992,
         0.04041323, -0.02851028,  0.01519936,  0.00774894,  0.03107964,
        -0.03446248,  0.02608592,  0.03191068,  0.03703871,  0.0109645 ,
         0.04372358, -0.01655585, -0.02942031,  0.01894147,  0.03872014,
         0.01134819,  0.00347427, -0.01146242,  0.02283066,  0.02851506,
         0.02349777, -0.01118717,  0.02750346,  0.04262658, -0.02828666,
        -0.02313282,  0.04221144, -0.00432613,  0.02283511,  0.03156028,
        -0.02401864,  0.00316074,  0.0394245 , -0.0076907 , -0.01421332,
         0.0120798 ,  0.01466175, -0.00338885, -0.00200982,  0.03692211,
         0.0406564 , -0.0247532 ,  0.02719761,  0.03358334, -0.03062048,
        -0.02887452,  0.03659029, -0.02814015,  0.0183915 ,  0.00640137,
        -0.01409731, -0.00464994,  0.01463275,  0.02606202, -0.04308993,
        -0.02407087,  0.04189159, -0.03521529, -0.04216833,  0.03461998,
         0.0050686 ,  0.02413738, -0.03453549,  0.00353891, -0.03194745,
         0.01773695,  0.03187784,  0.00735506,  0.01253001, -0.02070387,
         0.0082122 , -0.00345346,  0.01807107, -0.01510626,  0.02664854,
        -0.02575645, -0.03991555, -0.03949491, -0.03570243,  0.01141248,
         0.00365495, -0.00666707, -0.02822368,  0.0312775 ,  0.00759217,
         0.01838164, -0.00098791, -0.01686286,  0.02793992, -0.00049876,
         0.0414757 , -0.00746315, -0.01141816,  0.01109917,  0.0383158 ,
        -0.0287204 , -0.03465904,  0.01063798,  0.03738477,  0.00890531,
         0.03764111,  0.0195005 , -0.01519107,  0.01830037,  0.03299896,
        -0.00954227, -0.03735899, -0.03281826,  0.0060815 , -0.03368371,
         0.04073483, -0.02406031, -0.0421952 ,  0.0430722 ,  0.00721044,
        -0.02263309,  0.03439872,  0.02549012, -0.03934865, -0.02086004,
         0.00207777, -0.00821794,  0.03140179,  0.0339581 ,  0.03859858,
         0.02435435,  0.03678869, -0.01124636, -0.01879049,  0.01159412,
         0.00459689,  0.01571126,  0.02890864, -0.03413768, -0.02515361,
        -0.02354101,  0.01681644,  0.04233075,  0.03796756, -0.00597497,
         0.04271419, -0.01724664,  0.00520869, -0.01736109,  0.03667451,
         0.03002709,  0.03288423, -0.01723717,  0.01087708,  0.03438194,
        -0.00248548,  0.0297525 , -0.04403389,  0.03159046, -0.00305363,
         0.00168463, -0.02328275, -0.04113563, -0.02373913, -0.02680578,
        -0.01585301,  0.02682755,  0.03133226, -0.02047842,  0.00437964,
        -0.00173779,  0.01559884, -0.02631998,  0.02745498,  0.0012319 ,
         0.01884357, -0.04090017,  0.02373828, -0.00698842,  0.04098229,
        -0.04202289, -0.01511156, -0.01254193, -0.01015873, -0.03130059,
         0.03130135, -0.01543143,  0.00465019,  0.04081393,  0.03871025,
        -0.00360614,  0.04065033, -0.03697083, -0.03815678, -0.01952196,
        -0.01931516,  0.03585505,  0.00987918, -0.02379619,  0.01174209,
         0.00257947, -0.01164893, -0.0291566 , -0.0320601 ,  0.00426671,
        -0.03609918,  0.02194639, -0.00340569, -0.01859531,  0.02193537,
        -0.03877499, -0.01740452,  0.03190178, -0.01646395,  0.00357655,
         0.03155954,  0.00039681, -0.03708503,  0.03882829, -0.0094159 ,
         0.0435128 , -0.00695605, -0.00828632, -0.04153786,  0.00875881,
         0.01193802, -0.00911969]

    # wang
    emb3 = [-0.7634,0.0119,-1.2217,0.6823,-0.2730,-0.6854,-0.3620,1.1192,0.5186,-0.1871,-0.0721,-0.8311,0.3892,0.7862,-0.0614,-0.0742,-0.4254,0.5956,-0.0779,0.7271,0.1453,0.4425,-0.6928,0.5993,-0.5606,-0.3619,-0.3883,-1.0915,1.5036,0.5898,-0.2069,-0.5729,0.8311,0.0548,1.0538,0.9604,-0.0240,-0.5704,-0.6085,0.5090,-0.7557,-0.5557,-0.4245,0.2175,0.0142,0.2859,0.6732,-0.0625,0.2516,0.4875,-0.3153,0.6984,-0.4553,-0.5348,1.1472,-0.9103,-0.4601,0.2280,-0.1480,-0.6546,-0.9144,0.6134,1.5204,-0.1581,0.1785,0.1864,0.5354,-0.1081,-0.6142,0.7898,1.4440,1.1802,-0.5296,1.0818,-0.6210,-0.5392,-0.1531,0.1625,2.0075,0.2680,-0.6060,0.3066,-0.2874,-0.4692,1.1990,0.6354,-0.8229,-0.1692,-0.2760,1.3351,0.3409,0.3669,-0.9096,0.3285,0.1084,-0.4616,-0.1864,-0.5065,0.6094,-0.9686,0.7477,0.8837,0.1993,-0.1971,-0.3858,0.2871,0.0119,0.2482,-0.0557,0.1943,0.0639,0.4736,-0.1301,0.0906,-0.9764,0.7833,0.1289,0.9880,0.1227,-0.8345,-1.1383,0.1378,0.0742,0.0598,0.8835,1.1719,-1.1021,0.7452,0.5402,0.3213,-0.3351,-0.2493,-0.1356,0.5123,-0.5818,-1.4277,-0.4694,-0.0243,0.1686,0.2359,-0.9716,0.4081,0.6779,0.4729,1.1219,0.2930,-0.2556,0.1302,0.1721,1.1040,0.0875,-0.5112,-0.2166,-1.1060,-1.0175,-0.8930,0.8203,-0.4321,0.9467,-0.1798,0.5556,-0.9206,0.0820,-1.3233,-0.8779,-0.7185,-0.1186,-0.0343,0.0437,-0.5692,0.1142,-1.4122,1.1497,-1.1326,0.1100,0.0620,0.4024,-0.2048,1.8687,-0.4663,-0.0459,-1.2043,-0.0342,0.1119,0.2918,-0.8956,-0.5603,-0.2226,1.1238,-0.9093,-0.3525,-0.0150,0.3990,1.2096,-1.2855,-0.2043,0.1095,-0.6890,0.3131,0.3569,-0.6268,0.7572,-1.3264,-0.5730,1.2437,-0.1962,0.4966,0.1034,0.8654,0.9475,-1.1008,0.5506,-0.2013,1.1115,-0.2441,-0.4639,1.0983,-0.7204,0.6801,-0.4311,0.0801,-0.0406,-0.9584,0.7452,-0.9684,0.1481,-0.9260,-0.2183,-0.1236,-0.7814,0.2060,1.5722,1.9533,0.8336,0.8747,-0.2990,0.4811,-1.2060,-0.4201,1.1484,-1.2107,-1.0094,-0.9403,-0.9354,-0.1695,-0.6793,-0.6117,0.4016,0.0389,-0.4346,-0.0938,-0.0180,0.2126,-1.8326,-0.5788,0.5944,1.8153,-0.6829,1.0628,0.2787,-0.2848,-0.4327,0.3799,-0.5600,2.1055,0.0742,-0.4509,0.5261,-0.6186,-0.0629,-1.5814,-0.1229,-1.8239,0.3430,0.4792,0.2456,-0.1595,0.7304,0.3782,-0.6705,0.6046,0.9793,0.1455,0.5462,-0.6144,-0.7733,0.7035,-0.1865,0.5780,-1.5151,-0.2927,1.1450,0.7453,0.8417,0.9961,0.9217,-0.5612,0.6676,-0.3676,0.3708,0.4006,0.0076,-0.2485,-0.3010,-0.7510,-0.1752,-0.1830,0.6653,-0.2258,0.7884,0.8329,-0.9351,0.3128,-0.5003,-0.0670,-0.1616,-0.2107,-0.8024,0.3031,-0.2924,0.4383,-0.2220,-0.1235,0.3848,0.5362,-1.0041,0.3713,-0.0702,-1.3166,0.7593,-0.5641,0.2132,-1.2156,0.0180,-1.1497,0.4525,-0.0711,-0.4612,0.7044,0.2516,-0.4012,-0.5475,0.6009,0.4213,0.6183,1.8521,-0.2213,0.1660,-0.6200,0.4222,-0.1642,-0.8321,-0.4565,-0.0490,-0.5321,-0.4748,-0.0466,0.0685,-0.8440,-0.3922,0.1462,-0.8858,-0.5534,-0.4899,-0.0141,-0.5645,0.2650,-0.7069,-0.1620,-0.0792,0.3158,-0.1521,-0.7617,0.7444,-0.4944,-0.2909,0.3941,-1.3084,-0.5751,0.0352,-0.7351,-0.1067,0.1396,-0.6540,0.2915,0.5057,0.2255,-0.0647,0.3117,0.5503,-0.7575,-0.5200,0.2579,0.7573,-0.3834,0.0145,0.8167,-0.8568,0.1082,0.5208,-0.5421,0.2355,-0.5757,0.4113,0.5094,-0.3743,0.0953,0.0132,0.2044,0.2896,0.5900,1.0358,-0.1856,1.5489,-0.0855,0.6512,0.3070,-0.6513,0.6173,-0.7788,0.4329,-0.5377,0.6308,0.1523,0.5459,0.4645,0.7878,-0.1974,-0.2782,0.2173,0.6066,-1.3970,0.6768,0.3342,0.4732,0.9534,-0.5304,0.1977,0.0434,0.6506,-1.0684,-0.3006,-0.4158,-1.0351,-0.3884,1.1096,-0.8698,-0.5085,-0.3151,0.5644,0.4722,-0.8008,0.4506,-0.2204,0.0751,0.7442,0.9371,-1.0169,1.0707,-1.4992,0.6299,0.0573,0.9710,0.8496,-0.9119,0.2874,-0.4713,-0.8247,-0.2324,1.1172,0.7755,0.1928,-1.4297,0.5625,-0.4560,-0.0743,0.7255,0.2053,0.0752,1.4078,0.2048,-0.3968,-0.0015,-0.3729,-0.0581,0.0836,-0.8367,0.9093,0.4346,-0.3308,-0.1805,-0.4509,0.2092,0.2359,-1.6034,-0.0337,0.0265,0.3798,0.1993,0.0704,-0.4279,-1.0836,0.2974,0.5930,0.3365,-0.4616,0.4871,0.1768,-0.6453,0.4528,0.3477,0.4856]



    # test
    emb4 = [0.237736,-1.244949,0.486799,-0.825744,0.246079,0.184940,-1.080470,0.120512,-0.439849,0.387113,0.415734,0.464390,1.060131,0.107968,0.014615,0.338884
,0.286331,0.188289,-0.275857,-0.395090,0.207106,0.469505,-0.728981,1.331786,-0.490087,0.443441,0.797915,0.521570,-1.995365,0.313612,1.386653,0.746397
,0.285844,0.720760,-0.583136,0.852660,-0.285844,0.510548,-0.411837,-0.535516,-0.555246,0.055232,-0.233534,0.106202,0.908014,-0.126541,-0.419753,0.027768
,-0.453428,-0.951493,-0.312699,1.013424,-0.616689,0.126419,-0.687085,0.541362,1.211091,-0.688424,0.049813,-0.619795,-0.780742,0.760159,-0.070456,0.520596
,0.280911,-1.012023,0.291629,-0.111195,-0.989796,0.174344,1.191117,-0.351428,0.805344,-0.974633,-0.452454,0.125445,-0.811251,0.023201,-0.512741,0.000000
,0.409157,0.014919,0.619856,-0.125079,0.288219,-0.882681,1.009283,-0.559326,-0.139634,-0.032762,0.174892,-0.414212,0.135919,0.041105,-0.357579,0.288523
,-1.255179,-0.780498,-0.028377,-0.337909,-0.034406,0.265687,0.506225,0.185975,0.497517,-0.957156,0.521631,0.263312,0.484546,-0.600613,-0.891633,0.161617
,-0.175745,-0.459335,0.738480,0.306609,1.989154,-0.658342,0.290715,-0.836705,-0.300763,-0.113022,-0.487104,1.198485,-0.257954,0.626494,-0.267271,0.335047
,0.797123,-0.937061,0.350880,0.993755,-0.250220,0.774835,0.316840,-0.563588,-0.501962,0.466399,-1.208351,0.664371,0.420971,-0.270376,1.212918,0.135432
,-0.308497,-1.201409,0.522667,0.206010,-1.172179,0.650182,-0.101696,0.688911,-0.364460,0.661143,-0.446182,0.182991,-0.053649,0.781107,0.007125,0.056085
,0.495507,-0.217823,0.569069,0.040861,-0.205644,-0.707119,-0.438204,-0.582344,-0.048473,0.010535,1.017017,-0.046829,-0.827571,-0.092074,0.374081,0.073136
,0.195962,-0.868005,-0.126480,-0.050665,-0.236457,-0.385956,0.321102,0.583562,0.059556,0.253813,-0.187924,-1.117677,0.064306,0.023993,0.269463,0.454342
,-1.149404,-0.181408,-0.863195,-0.240903,0.481197,-0.700847,0.103644,-0.765335,-0.394481,-0.166001,-0.092318,-0.133727,-0.438387,-0.737811,-0.876896,-0.064549
,0.584110,0.756566,0.149377,-0.761621,-0.995155,-1.161461,0.511218,-0.052309,-0.214474,1.008491,-0.983159,-0.375299,-0.253691,-0.449775,-0.141582,0.394725
,-0.646650,-0.456230,0.115762,-0.037816,-0.121548,0.029169,0.966900,-0.154797,-0.239624,0.079834,-0.340102,-0.188106,-1.527261,-0.647381,-0.426452,-1.147090
,-0.278414,0.614375,0.053893,-0.032031,-0.107298,0.488748,0.676002,-0.688668,-1.017504,-0.265931,0.358553,-0.449714,0.938522,-0.282982,0.532836,-1.188499
,0.211125,0.689094,-1.260295,0.225374,0.865935,-0.080382,0.236518,-0.146880,0.376395,0.311055,-0.019304,0.016442,-0.142069,-0.304234,0.661752,0.017842
,0.732026,0.428948,-0.499892,-0.639647,-0.052127,0.304965,0.546355,-0.071004,0.261486,0.312333,0.463841,-0.878784,0.882681,1.364182,-0.165575,-1.018661
,-0.639160,-0.568704,-1.112379,0.042322,-0.831163,0.089699,1.801108,-0.809302,-0.081235,0.360563,-0.833295,0.792129,-1.091797,0.671008,0.382302,-0.324634
,0.125567,-0.984194,-0.256918,0.683370,-0.773800,0.113631,0.100843,-0.655236,0.349419,0.393020,-0.232073,0.498126,-0.458483,-0.507930,0.073257,-0.681300
,0.437413,0.425416,0.012484,0.700238,0.845596,-0.364521,-0.224400,0.773313,1.166028,-0.049752,1.063541,0.188959,0.629356,-0.204426,0.058216,-0.816305
,0.544224,0.188715,0.090186,0.158694,-1.288854,-0.164357,0.247967,0.338397,0.933407,-0.636054,-0.242730,-0.802725,0.174344,0.313673,0.976826,-0.534176
,-0.636724,-0.397831,-0.005602,-0.057303,-0.626737,-0.288523,0.041287,-0.496542,-0.000792,0.713391,1.928441,-0.819106,0.791399,-0.587581,0.234143,0.732939
,-1.178755,-0.406112,-0.096398,0.395029,-0.144749,0.440275,-0.554637,-0.543919,-0.282555,-1.416553,-0.349845,0.701151,-0.083488,-0.763265,-0.630878,-0.372133
,-1.352186,-0.641413,-0.712783,0.138598,-0.248332,0.255822,-0.771486,1.640039,-0.293821,0.311176,-0.837984,0.376883,0.676367,-0.780377,-0.429009,-1.361503
,1.044724,-0.105532,-0.386139,1.495960,0.098468,0.459153,-0.183539,-0.037329,-0.208080,0.825744,-1.019392,-0.298510,-0.556829,-0.698046,-0.120269,0.627346
,0.499283,-0.999174,0.189933,-0.066193,0.139877,0.346678,-0.496786,0.265017,-0.695001,0.027586,-0.482110,-0.533567,-0.941019,-1.035346,0.689886,0.255457
,-0.021131,-0.951006,-0.208080,1.436404,-0.309106,0.618212,0.194318,0.101208,0.134884,0.409218,-0.931398,-0.414151,0.311785,0.229150,0.293577,0.966047
,-1.308402,0.049325,0.032336,0.490331,0.070639,0.421032,-0.307462,1.017199,-1.109700,-0.378344,0.979810,-0.183600,0.059251,-1.547113,0.300032,0.288767
,0.875800,-0.581918,0.158572,0.328349,0.434368,-0.335047,0.495873,0.492706,-0.442893,0.288340,-0.767528,0.117955,0.905273,-0.132631,0.716375,-0.492097
,-0.480831,0.447278,0.075632,-0.390889,0.602318,0.391680,-0.455803,-0.360441,-0.223852,1.416370,0.722221,-1.440911,-0.077642,-1.331481,0.021435,0.549704
,0.290776,0.290350,1.161035,-0.324939,0.752730,-0.941263,0.150960,0.235240,-0.051152,0.548974,0.041774,-0.250463,0.643422,0.378588,0.337057,0.930850]




    try:
        # 直接计算余弦相似度
        raw_similarity = np.dot(emb1, emb3) / (np.linalg.norm(emb1) * np.linalg.norm(emb3))

        raw_similarity_1 = np.dot(emb2, emb3) / (np.linalg.norm(emb2) * np.linalg.norm(emb3))

        raw_similarity_2 = np.dot(emb1, emb4) / (np.linalg.norm(emb1) * np.linalg.norm(emb4))
        raw_similarity_3 = np.dot(emb2, emb4) / (np.linalg.norm(emb2) * np.linalg.norm(emb4))
        raw_similarity_4 = np.dot(emb3, emb4) / (np.linalg.norm(emb3) * np.linalg.norm(emb4))

        # 先归一化再计算余弦相似度
        normalized_similarity, is_same_person = compare_faces(emb1, emb2)
        normalized_similarity_1, is_same_person_1 = compare_faces(emb1, emb4)

        # 输出结果比较
        print(f"1---3    不归一化的余弦相似度: {raw_similarity:.4f}")
        print(f"2---3    不归一化的余弦相似度_1: {raw_similarity_1:.4f}")
        print(f"1---2    L2归一化后的余弦相似度: {normalized_similarity:.4f}")
        print("\n")
        print(f"1---4    不归一化的余弦相似度_1: {raw_similarity_2:.4f}")
        print(f"2---4    不归一化的余弦相似度_1: {raw_similarity_3:.4f}")
        print(f"3---4    不归一化的余弦相似度_1: {raw_similarity_4:.4f}")
        print(f"Same person? {'YES' if is_same_person else 'NO'}")
        print(f"1---4    L2归一化后的余弦相似度: {normalized_similarity_1:.4f}")

        # 验证两种计算方法是否得到相同结果
        # print(f"两种方法结果是否相同: {abs(raw_similarity - normalized_similarity) < 1e-6}")

        # 分析L2归一化的效果
        # print("\n分析L2归一化的效果:")


    except ValueError as e:
        print(f"错误: {e}")



# from PIL import Image
# import os
#
# def convert_bmp_to_jpg(input_path, output_path=None):
#     # 自动设置输出路径为同名的 .jpg 文件
#     if output_path is None:
#         output_path = os.path.splitext(input_path)[0] + ".jpg"
#
#     try:
#         with Image.open(input_path) as img:
#             rgb_img = img.convert("RGB")  # 转为 RGB 以兼容 JPEG
#             rgb_img.save(output_path, "JPEG")
#         print(f"✅ Converted: {input_path} → {output_path}")
#     except Exception as e:
#         print(f"❌ Error converting image: {e}")
#
# # 示例用法
# if __name__ == "__main__":
#     # 这里替换为你要转换的 BMP 图片路径
#     bmp_path = "C:/Users/admin/Desktop/fsdownload/face.bmp"
#     convert_bmp_to_jpg(bmp_path)




import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams['font.sans-serif'] = ['SimHei']  # 设置中文字体为黑体（Windows 下常有）
matplotlib.rcParams['axes.unicode_minus'] = False    # 解决负号显示为方块的问题



# 读取图像并转为灰度图
# img = cv2.imread('Z:/nfs/face720p.bmp')
# imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY).astype(np.float32)
#
# # 各种灰度变换参数
# alfa1, beta1 = 1, 50
# alfa2, beta2 = 1, -50
# alfa3, beta3 = 1.5, 0
# alfa4, beta4 = 0.75, 0
# alfa5, beta5 = -0.5, 0
# alfa6, beta6 = -1, 255
#
# # 使用 NumPy 向量化计算
# img1 = np.clip(alfa1 * imgGray + beta1, 0, 255).astype(np.uint8)
# img2 = np.clip(alfa2 * imgGray + beta2, 0, 255).astype(np.uint8)
# img3 = np.clip(alfa3 * imgGray + beta3, 0, 255).astype(np.uint8)
# img4 = np.clip(alfa4 * imgGray + beta4, 0, 255).astype(np.uint8)
# img5 = np.clip(alfa5 * imgGray + beta5, 0, 255).astype(np.uint8)
# img6 = np.clip(alfa6 * imgGray + beta6, 0, 255).astype(np.uint8)
#
# # 显示结果
# plt.figure(figsize=(10, 6))
# titleList = ["1. 原灰度图", "2. beta=50", "3. beta=-50", "4. alpha=1.5", "5. alpha=0.75", "6. alpha=-0.5"]
# imageList = [imgGray.astype(np.uint8), img1, img2, img3, img4, img5]
# for i in range(6):
#     plt.subplot(2, 3, i + 1)
#     plt.imshow(imageList[i], cmap='gray', vmin=0, vmax=255)
#     plt.title(titleList[i])
#     plt.axis('off')
# plt.tight_layout()
# plt.show()

#########################################################
#图像分段线性灰度变换
# # 1.50 分段线性灰度变换 (对比度拉伸)
# imgGray = cv2.imread("Z:/nfs/face720p.bmp", flags=0)  # flags=0 读取为灰度图像
# height, width = imgGray.shape[:2]  # 图片的高度和宽度
#
# # constrast stretch, (r1,s1)=(rMin,0), (r2,s2)=(rMax,255)
# rMin = imgGray.min()  # 原始图像灰度的最小值
# rMax = imgGray.max()  # 原始图像灰度的最大值
# r1, s1 = rMin, 0  # (x1,y1)
# r2, s2 = rMax, 255  # (x2,y2)
#
# imgStretch = np.empty((height, width), np.uint8)  # 创建空白数组
# k1 = s1 / r1  # imgGray[h,w] < r1:
# k2 = (s2 - s1) / (r2 - r1)  # r1 <= imgGray[h,w] <= r2
# k3 = (255 - s2) / (255 - r2)  # imgGray[h,w] > r2
# for h in range(height):
#     for w in range(width):
#         if imgGray[h, w] < r1:
#             imgStretch[h, w] = k1 * imgGray[h, w]
#         elif r1 <= imgGray[h, w] <= r2:
#             imgStretch[h, w] = k2 * (imgGray[h, w] - r1) + s1
#         elif imgGray[h, w] > r2:
#             imgStretch[h, w] = k3 * (imgGray[h, w] - r2) + s2
#
# plt.figure(figsize=(10, 3.5))
# plt.subplots_adjust(left=0.2, bottom=0.2, right=0.9, top=0.8, wspace=0.1, hspace=0.1)
# plt.subplot(131), plt.title("s=T(r)")
# x = [0, 96, 182, 255]
# y = [0, 30, 220, 255]
# plt.plot(x, y)
# plt.axis([0, 256, 0, 256])
# plt.text(105, 25, "(r1,s1)", fontsize=10)
# plt.text(120, 215, "(r2,s2)", fontsize=10)
# plt.xlabel("r, Input value")
# plt.ylabel("s, Output value")
# plt.subplot(132), plt.imshow(imgGray, cmap='gray', vmin=0, vmax=255), plt.title("Original"), plt.axis('off')
# plt.subplot(133), plt.imshow(imgStretch, cmap='gray', vmin=0, vmax=255), plt.title("Stretch"), plt.axis('off')
# plt.show()
########################################################
#图像锐化拉普拉斯变换
# 1.78：图像锐化：拉普拉斯算子 (Laplacian)
# img = cv2.imread("Z:/nfs/face720p.bmp", flags=0)  # NASA 月球影像图
#
# # 使用函数 filter2D 实现 Laplace 卷积算子
# kernLaplace = np.array([[0, 1, 0], [1, -4, 1], [0, 1, 0]])  # Laplacian kernel
# imgLaplace1 = cv2.filter2D(img, -1, kernLaplace, borderType=cv2.BORDER_REFLECT)
#
# # 使用 cv2.Laplacian 实现 Laplace 卷积算子
# imgLaplace2 = cv2.Laplacian(img, -1, ksize=3)
# imgRecovery = cv2.add(img, imgLaplace2)  # 恢复原图像
#
# # 二值化边缘图再卷积
# ret, binary = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_TRIANGLE)
# imgLaplace3 = cv2.Laplacian(binary, cv2.CV_64F)
# imgLaplace3 = cv2.convertScaleAbs(imgLaplace3)
#
# plt.figure(figsize=(9, 6))
# plt.subplot(131), plt.axis('off'), plt.title("Original")
# plt.imshow(img, cmap='gray', vmin=0, vmax=255)
# plt.subplot(132), plt.axis('off'), plt.title("cv.Laplacian")
# plt.imshow(imgLaplace2, cmap='gray', vmin=0, vmax=255)
# plt.subplot(133), plt.axis('off'), plt.title("thresh-Laplacian")
# plt.imshow(imgLaplace3, cmap='gray', vmin=0, vmax=255)
# plt.tight_layout()
# plt.show()
#####################################################
#sobel锐化
# img = cv2.imread("Z:/nfs/face720p.bmp", flags=0)
#
# # 使用函数 filter2D 实现 Sobel 算子
# kernSobelX = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])  # SobelX kernel
# kernSobelY = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])  # SobelY kernel
# imgSobelX = cv2.filter2D(img, -1, kernSobelX, borderType=cv2.BORDER_REFLECT)
# imgSobelY = cv2.filter2D(img, -1, kernSobelY, borderType=cv2.BORDER_REFLECT)
#
# # 使用 cv2.Sobel 实现 Sobel 算子
# SobelX = cv2.Sobel(img, cv2.CV_16S, 1, 0)  # 计算 x 轴方向
# SobelY = cv2.Sobel(img, cv2.CV_16S, 0, 1)  # 计算 y 轴方向
# absX = cv2.convertScaleAbs(SobelX)  # 转回 uint8
# absY = cv2.convertScaleAbs(SobelY)  # 转回 uint8
# SobelXY = cv2.addWeighted(absX, 0.5, absY, 0.5, 0)  # 用绝对值近似平方根
#
# plt.figure(figsize=(10, 6))
# plt.subplot(141), plt.axis('off'), plt.title("Original")
# plt.imshow(img, cmap='gray', vmin=0, vmax=255)
# plt.subplot(142), plt.axis('off'), plt.title("SobelX")
# plt.imshow(SobelX, cmap='gray', vmin=0, vmax=255)
# # plt.imshow(imgSobelX, cmap='gray', vmin=0, vmax=255)
# plt.subplot(143), plt.axis('off'), plt.title("SobelY")
# plt.imshow(SobelY, cmap='gray', vmin=0, vmax=255)
# # plt.imshow(imgSobelY, cmap='gray', vmin=0, vmax=255)
# plt.subplot(144), plt.axis('off'), plt.title("SobelXY")
# plt.imshow(SobelXY, cmap='gray')
# plt.tight_layout()
# plt.show()


# #3*3的模糊过滤算子（有效）
# import cv2
# import numpy as np
# import matplotlib.pyplot as plt
#
# # motion filter
# def motion_filter(img, K_size=3):
#     H, W, C = img.shape
#
#     # Kernel
#     K = np.diag([1] * K_size).astype(np.float64)
#     K /= K_size
#
#     # zero padding
#     pad = K_size // 2
#     out = np.zeros((H + pad * 2, W + pad * 2, C), dtype=np.float64)
#     out[pad: pad + H, pad: pad + W] = img.copy().astype(np.float64)
#
#     tmp = out.copy()
#
#     # filtering
#     for y in range(H):
#         for x in range(W):
#             for c in range(C):
#                 out[pad + y, pad + x, c] = np.sum(K * tmp[y: y + K_size, x: x + K_size, c])
#
#     out = out[pad: pad + H, pad: pad + W].astype(np.uint8)
#     return out
#
# # Read image
# img = cv2.imread("Z:/nfs/face.jpg")
#
# # Check if image is loaded correctly
# if img is None:
#     raise FileNotFoundError("Image not found at given path!")
#
# # motion filtering
# out = motion_filter(img, K_size=3)
#
# # Save result
# cv2.imwrite("out.jpg", out)
# print("图像已保存为 out.jpg")
#
# # Show using matplotlib
# plt.imshow(cv2.cvtColor(out, cv2.COLOR_BGR2RGB))
# plt.title("Motion Filter Result")
# plt.axis("off")
# plt.show()


# import cv2
# import numpy as np
# import matplotlib.pyplot as plt
#
# def high_reserve(img, ksize, sigm):
#     img = img * 1.0
#     gauss_out = cv2.GaussianBlur(img, (ksize, ksize), sigm)
#     img_out = img - gauss_out + 128
#     img_out = img_out / 255.0
#     mask_1 = img_out < 0
#     mask_2 = img_out > 1
#     img_out = img_out * (1 - mask_1)
#     img_out = img_out * (1 - mask_2) + mask_2
#     return img_out
#
# def usm(img, number):
#     blur_img = cv2.GaussianBlur(img, (0, 0), number)
#     usm = cv2.addWeighted(img, 1.5, blur_img, -0.5, 0)
#     return usm
#
# def Overlay(target, blend):
#     mask = blend < 0.5
#     img = 2 * target * blend * mask + (1 - mask) * (1 - 2 * (1 - target) * (1 - blend))
#     return img
#
# img = cv2.imread(r'Z:/nfs/face720p.bmp')
# img_gas = cv2.GaussianBlur(img, (3, 3), 1.5)
# high = high_reserve(img_gas, 15, 3)
# usm1 = usm(high, 11)
# add = (Overlay(img_gas / 255, usm1) * 255).astype(np.uint8)
#
# # 将 BGR 转换为 RGB 以供 matplotlib 显示
# add_rgb = cv2.cvtColor(add, cv2.COLOR_BGR2RGB)
# img_gas_rgb = cv2.cvtColor(img_gas, cv2.COLOR_BGR2RGB)
#
# # 使用 matplotlib 显示图像
# plt.figure(figsize=(10, 5))
# plt.subplot(1, 2, 1)
# plt.imshow(img_gas_rgb)
# plt.title("Gaussian Blurred")
# plt.axis('off')
#
# plt.subplot(1, 2, 2)
# plt.imshow(add_rgb)
# plt.title("Deblurred (USM + Overlay)")
# plt.axis('off')
#
# plt.tight_layout()
# plt.show()


#维纳滤波
# import cv2
# import numpy as np
# from scipy.signal import wiener
# import matplotlib.pyplot as plt
#
# # 读取原始图像（灰度）
# img_path = "Z:/nfs/face720p.bmp"  # 或使用你的图片路径
# img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
#
# # 应用维纳滤波
# # wiener 滤波会自动根据局部方差估计恢复图像
# filtered_img = wiener(img, (5, 5))  # 滤波窗口大小可以调整
#
# # 将结果缩放到 0-255 并转换为 uint8 类型
# filtered_img = np.uint8(np.clip(filtered_img, 0, 255))
#
# # 显示原图和结果图
# plt.figure(figsize=(10, 5))
# plt.subplot(1, 2, 1)
# plt.title("Original Image")
# plt.imshow(img, cmap='gray')
# plt.axis('off')
#
# plt.subplot(1, 2, 2)
# plt.title("Wiener Filtered Image")
# plt.imshow(filtered_img, cmap='gray')
# plt.axis('off')
#
# plt.tight_layout()
# plt.show()


# 逆滤波实现
# import cv2
# import numpy as np
# from matplotlib import pyplot as plt
#
# img = cv2.imread('Z:/nfs/face720p.bmp', 0)
# rows = img.shape[0]
# cols = img.shape[1]
#
# Cx = rows//2
# Cy = cols//2
#
# dft = np.fft.fft2(img)
# dft_shift = np.fft.fftshift(dft)
#
# img_list = []
# img_name_list = []
#
# # 大气湍流模型的参数
# k = 0.0025
#
# # 构造退化函数
# H = np.zeros((rows, cols))
# for x in range(rows):
#     for y in range(cols):
#         D = ((x - Cx) ** 2 + (y - Cy) ** 2) ** (5/6)
#         H[x, y] = np.exp(-k * D)
#
# # 构造巴特沃斯低通滤波器
# radius = [float("inf"), 40, 60, 70]
# n = 10
# for D0 in radius:
#     HB = np.zeros((rows, cols))
#     for x in range(rows):
#         for y in range(cols):
#             D = np.sqrt((x-Cx)**2 + (y-Cy)**2)
#             HB[x, y] = 1 / (1 + (D/D0)**(2*n))
#
#     dft_filtered = np.multiply(np.multiply(dft_shift, 1/H), HB)
#     img_result = np.abs(np.fft.ifft2(np.fft.fftshift(dft_filtered)))
#     img_list.append(img_result)
#     img_name_list.append('r=' + str(D0))
#
# _, axs = plt.subplots(2, 2)
#
# for i in range(2):
#     for j in range(2):
#         axs[i, j].imshow(img_list[i * 2 + j], cmap='gray')
#         axs[i, j].set_title(img_name_list[i * 2 + j])
#         axs[i, j].axis('off')
#
# #plt.savefig('inverse_filter.jpg')
# plt.show()






